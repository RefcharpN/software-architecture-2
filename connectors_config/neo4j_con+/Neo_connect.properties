name: Neo4jSinkConnector
topics: mirea.public.students, mirea.public.kafedra, mirea.public.disciplines, mirea.public.group, mirea.public.lecture, mirea.public.specialnost, mirea.public.timetable, mirea.public.institute
connector.class: streams.kafka.connect.sink.Neo4jSinkConnector
key.converter: org.apache.kafka.connect.storage.StringConverter
errors.tolerance: all
errors.log.enable: true
errors.log.include.messages: true
neo4j.batch.parallelize: false
neo4j.server.uri: bolt://neo4j:7687
neo4j.authentication.basic.username: neo4j
neo4j.authentication.basic.password: 2517Pass!Part

neo4j.topic.cypher.mirea.public.students: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (s:Student {id_stud_code: event.after.id_stud_code}) ON CREATE SET s.fio = event.after.fio, s.group_id = event.after.group_id ON MATCH SET s.fio = event.after.fio, s.group_id = event.after.group_id WITH s, event MATCH (g:Group {id: s.group_id}) MERGE (g)-[:HAS_STUDENT]->(s)', \
  event.op = 'd', 'MATCH (s:Student {id_stud_code: event.before.id_stud_code}) DETACH DELETE s', \
  event.op = 'u', 'MATCH (s:Student {id_stud_code: event.before.id_stud_code}) SET s.code = event.after.code, s.fio = event.after.fio, s.group_id = event.after.group_id WITH s, event MATCH (g:Group)-[r:HAS_STUDENT]->(s) WHERE g.id <> event.after.group_id DELETE r WITH s, event MATCH (g:Group {id: s.group_id}) MERGE (g)-[:HAS_STUDENT]->(s)' \
], '', {event: event}) YIELD value as students RETURN students

neo4j.topic.cypher.mirea.public.kafedra: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (k:Kafedra {id: event.after.id}) ON CREATE SET k.name = event.after.name, k.institute_id = event.after.institute_id ON MATCH SET k.name = event.after.name, k.institute_id = event.after.institute_id WITH k, event MATCH (i:Institute {id: k.institute_id}) MERGE (i)-[:HAS_KAFEDRA]->(k)', \
  event.op = 'd', 'MATCH (k:Kafedra {id: event.before.id}) DETACH DELETE k', \
  event.op = 'u', 'MATCH (k:Kafedra {id: event.before.id}) SET k.name = event.after.name, k.institute_id = event.after.institute_id WITH k, event MATCH (i:Institute)-[r:HAS_KAFEDRA]->(k) WHERE i.id <> event.after.institute_id DELETE r WITH k, event MATCH (i:Institute {id: k.institute_id}) MERGE (i)-[:HAS_KAFEDRA]->(k)' \
], '', {event: event}) YIELD value as kafedra RETURN kafedra

neo4j.topic.cypher.mirea.public.disciplines: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (ds:Disciplines {id: event.after.id}) ON CREATE SET ds.name = event.after.name, ds.technical = event.after.technical, ds.spec_id = event.after.spec_id ON MATCH SET ds.name = event.after.name, ds.technical = event.after.technical, ds.spec_id = event.after.spec_id WITH ds, event MATCH (sp:Specialnost {id: ds.spec_id}) MERGE (sp)-[:HAS_DISCIPLINE]->(ds)', \
  event.op = 'd', 'MATCH (d:Disciplines {id: event.before.id}) DETACH DELETE d', \
  event.op = 'u', 'MATCH (d:Disciplines {id: event.before.id}) SET d.name = event.after.name, d.technical = event.after.technical, d.spec_id = event.after.spec_id WITH d, event MATCH (s:Specialnost)-[r:HAS_DISCIPLINE]->(d) WHERE s.id <> event.after.spec_id DELETE r WITH d, event MATCH (s:Specialnost {id: d.spec_id}) MERGE (s)-[:HAS_DISCIPLINE]->(d)' \
], '', {event: event}) YIELD value as disciplines RETURN disciplines


neo4j.topic.cypher.mirea.public.group: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (g:Group {id: event.after.id}) ON CREATE SET g.name = event.after.name, g.kurs = event.after.kurs, g.spec_id = event.after.spec_id ON MATCH SET g.name = event.after.name, g.kurs = event.after.kurs, g.spec_id = event.after.spec_id WITH g, event MATCH (s:Specialnost {id: g.spec_id}) MERGE (s)-[:HAS_GROUP]->(g)', \
  event.op = 'd', 'MATCH (g:Group {id: event.before.id}) DETACH DELETE g', \
  event.op = 'u', 'MATCH (g:Group {id: event.before.id}) SET g.name = event.after.name, g.kurs = event.after.kurs, g.spec_id = event.after.spec_id WITH g, event MATCH (s:Specialnost)-[r:HAS_GROUP]->(g) WHERE s.id <> event.after.spec_id DELETE r WITH g, event MATCH (s:Specialnost {id: g.spec_id}) MERGE (s)-[:HAS_GROUP]->(g)' \
], '', {event: event}) YIELD value as group RETURN group

neo4j.topic.cypher.mirea.public.lecture: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (l:Lecture {id: event.after.id}) ON CREATE SET l.name = event.after.name, l.discip_id = event.after.discip_id ON MATCH SET l.name = event.after.name, l.discip_id = event.after.discip_id WITH l, event MATCH (d:Disciplines {id: l.discip_id}) MERGE (d)-[:HAS_LECTURE]->(l)', \
  event.op = 'd', 'MATCH (l:Lecture {id: event.before.id}) DETACH DELETE l', \
  event.op = 'u', 'MATCH (l:Lecture {id: event.before.id}) SET l.name = event.after.name, l.discip_id = event.after.discip_id WITH l, event MATCH (d:Disciplines)-[r:HAS_LECTURE]->(l) WHERE d.id <> event.after.discip_id DELETE r WITH l, event MATCH (d:Disciplines {id: l.discip_id}) MERGE (d)-[:HAS_LECTURE]->(l)' \
], '', {event: event}) YIELD value as lecture RETURN lecture

neo4j.topic.cypher.mirea.public.specialnost: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (sp:Specialnost {id: event.after.id}) ON CREATE SET sp.name = event.after.name, sp.kafedra_id = event.after.kafedra_id ON MATCH SET sp.name = event.after.name, sp.kafedra_id = event.after.kafedra_id WITH sp, event MATCH (k:Kafedra {id: sp.kafedra_id}) MERGE (k)-[:HAS_SPEC]->(sp)', \
  event.op = 'd', 'MATCH (sp:Specialnost {id: event.before.id}) DETACH DELETE sp', \
  event.op = 'u', 'MATCH (sp:Specialnost {id: event.before.id}) SET sp.name = event.after.name, sp.kafedra_id = event.after.kafedra_id WITH sp, event MATCH (k:Kafedra)-[r:HAS_SPEC]->(s) WHERE k.id <> event.after.kafedra_id DELETE r WITH sp, event MATCH (k:Kafedra {id: sp.kafedra_id}) MERGE (k)-[:HAS_SPEC]->(s)' \
], '', {event: event}) YIELD value as specialnost RETURN specialnost

neo4j.topic.cypher.mirea.public.timetable: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (t:TimeTable {id: event.after.id}) ON CREATE SET t.date = event.after.date, t.week = event.after.week,  t.time = event.after.time, t.lecture_id = event.after.lecture_id, t.group_id = event.after.group_id ON MATCH SET t.date = event.after.date, t.week = event.after.week,  t.time = event.after.time, t.lecture_id = event.after.lecture_id, t.group_id = event.after.group_id  WITH t, event MATCH (l:Lecture {id: t.lecture_id}), (g:Group {id: t.group_id})  MERGE (l)-[:HAS_TIMESTAMP]->(t)<-[:HAS_TIMETABLE]-(g)', \
  event.op = 'd', 'MATCH (t:TimeTable {id: event.before.id}) DETACH DELETE t', \
  event.op = 'u', 'MATCH (t:TimeTable {id: event.before.id}) SET t.date = event.after.date, t.week = event.after.week,  t.time = event.after.time, t.lecture_id = event.after.lecture_id, t.group_id = event.after.group_id WITH t, event MATCH (l:Lecture {id: event.before.lecture_id})-[k:HAS_TIMESTAMP]->(t)<-[q:HAS_TIMESTAMP]-(g:Group {id: event.before.group_id}) DETACH DELETE k, q WITH t, event MATCH (l_new:Lecture {id: event.after.lecture_id}), (g_new:Group {id: event.after.group_id}) MERGE (l_new)-[:HAS_TIMESTAMP]->(t)<-[:HAS_TIMESTAMP]-(g_new)' \
], '', {event: event}) YIELD value as timetable RETURN timetable

neo4j.topic.cypher.mirea.public.institute: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (i:Institute {id: event.after.id}) ON CREATE SET i.id = event.after.id, i.name = event.after.name', \
  event.op = 'd', 'MATCH (i:Institute {id: event.before.id}) DETACH DELETE i', \
  event.op = 'u', 'MATCH (i:Institute {id: event.before.id}) SET i.id = event.after.id, i.name = event.after.name' \
], '', {event: event}) YIELD value as institute RETURN institute
