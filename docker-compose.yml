version: '3.8'
services:
    zookeeper:
        image: confluentinc/cp-zookeeper:6.2.0
        container_name: zookeeper
        restart: always
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        volumes:
          - ./data/zookeeper/data:/var/lib/zookeeper/data
          - ./data/zookeeper/log:/var/lib/zookeeper/log

    broker:
        image: confluentinc/cp-kafka:6.2.0
        container_name: broker
        restart: always
        depends_on:
            - zookeeper
        ports:
            - 9092:9092
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_CLUSTER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
       


    schema-registry:
        image: confluentinc/cp-schema-registry:6.2.0
        container_name: schema-registry
        restart: always
        ports:
            - "8081:8081"
        depends_on:
            - broker
        environment:
            SCHEMA_REGISTRY_HOST_NAME: schema-registry
            SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092
        volumes:
            - ./data/schema-registry:/var/lib/schema-registry/data

    kafka-connect:
        image: confluentinc/cp-kafka-connect-base:6.2.0
        container_name: kafka-connect
        restart: always
        depends_on:
            - broker
            - schema-registry
        ports:
            - 8083:8083
        environment:
            CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars,/var/lib/kafka-connect/data
            CONNECT_BOOTSTRAP_SERVERS: "broker:29092"
            CONNECT_REST_PORT: 8083
            CONNECT_GROUP_ID: kafka-connect
            CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
            CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
            CONNECT_STATUS_STORAGE_TOPIC: _connect-status
            CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
            CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
            CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
            CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
            CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
            CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
            CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
            CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
        command:
            - bash
            - -c
            - |
                echo "Installing Connector"
                confluent-hub install --no-prompt debezium/debezium-connector-postgresql:latest
                confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:latest
                confluent-hub install --no-prompt neo4j/kafka-connect-neo4j:latest
                #
                echo "Launching Kafka Connect worker"
                /etc/confluent/docker/run &
                #
                sleep infinity
        volumes:
            - ./data/kafka-connect/lib:/var/lib/kafka-connect/data
            - ./data/kafka-connect/data:/data
            - ./data/kafka-connect/plugin:/data/connect-jars


    ksqldb:
        image: confluentinc/ksqldb-server:0.21.0
        container_name: ksqldb
        restart: always
        depends_on:
            - broker
            - schema-registry
        ports:
            - "8088:8088"
        environment:
            KSQL_LISTENERS: http://0.0.0.0:8088
            KSQL_BOOTSTRAP_SERVERS: broker:29092
            KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
            KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
            KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
            KSQL_STREAMS_PRODUCER_MAX_BLOCK_MS: 9223372036854775807
            KSQL_KSQL_CONNECT_URL: http://kafka-connect:8083
            KSQL_KSQL_SERVICE_ID: confluent_rmoff_01
            KSQL_KSQL_HIDDEN_TOPICS: '^_.*'
        volumes:
            - ./data/ksqldb:/var/lib/ksqldb

    control-center:
        image: confluentinc/cp-enterprise-control-center:6.2.0
        container_name: control-center
        restart: always
        depends_on:
            - broker
            - schema-registry
        ports:
            - "9021:9021"
        environment:
            CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
            CONTROL_CENTER_CONNECT_CONNECT_CLUSTER: 'kafka-connect:8083'
            CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
            CONTROL_CENTER_KSQL_KSQLDB_URL: "http://ksqldb:8088"
            CONTROL_CENTER_KSQL_KSQLDB_ADVERTISED_URL: "http://localhost:8088"
            CONFLUENT_METRICS_TOPIC_REPLICATION: 1
            CONTROL_CENTER_REPLICATION_FACTOR: 1
            CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
            CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
            CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
            CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
            CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
            CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
            CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 104857600

    postgresql:
        container_name: postgres
        image: debezium/postgres:15-alpine
        restart: always
        environment:
            - POSTGRES_PASSWORD=2517Pass!Part
        ports:
            - 5432:5432
        volumes:
            - ./data/postgresql:/var/lib/postgresql/data

    elasticsearch:
        container_name: elasticsearch
        image: elasticsearch:7.17.7
        restart: always
        environment:
          discovery.type: "single-node"
          xpack.security.enabled: "false"
          ES_JAVA_OPTS: "-Xms1g -Xmx1g"
        ports:
          - 9200:9200
          - 9300:9300
        volumes:
            - ./data/elastic:/usr/share/elasticsearch/data

    neo4j:
        container_name: neo4j
        image: neo4j:latest
        restart: always
        ports:
          - 7474:7474
          - 7687:7687
        environment:
            NEO4J_AUTH: neo4j/2517Pass!Part
        volumes:
            - ./data/neo/neo4j-logs:/logs
            - ./data/neo/neo4j-conf:/conf
            - ./data/neo/neo4j-data:/data
            - ./data/neo-plugin:/plugins

    mongo:
        container_name: mongo
        image: mongo
        restart: always
        ports:
            - 27017:27017
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: 2517Pass!Part
        volumes:
            - ./data/mongo:/data/db

    mongo-express:
        container_name: mongo-express
        image: mongo-express
        restart: always
        ports:
            - 9050:8081
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: root
            ME_CONFIG_MONGODB_ADMINPASSWORD: 2517Pass!Part
            ME_CONFIG_MONGODB_URL: mongodb://root:2517Pass!Part@mongo:27017/
            
    redis:
        image: redis:latest
        container_name: redis-server
        restart: always
        ports:
          - "6379:6379"
        volumes:
          - ./data/redis/data:/data
          - ./data/redis/redis.conf:/usr/local/etc/redis/redis.conf
        environment:
          - REDIS_PORT=6379
          - REDIS_DATABASES=16

    kafkacat:
        image: edenhill/kafkacat:1.6.0
        container_name: kafkacat
        restart: always
        entrypoint:
        - /bin/sh
        - -c
        - |
            apk add jq;
            while [ 1 -eq 1 ];do sleep 60;done


    influxdb:
        image: influxdb:latest
        container_name: influxdb
        volumes:
          - ./data/influx:/var/lib/influxdb
        environment:
          - INFLUXDB_DB=telegraf
          - INFLUXDB_ADMIN_USER=admin
          - INFLUXDB_ADMIN_PASSWORD=adminpassword
          - INFLUXDB_HTTP_AUTH_ENABLED=true
          - INFLUXDB_USER=telegraf
          - INFLUXDB_USER_PASSWORD=telegrafpassword
        ports:
          - "8086:8086"

    telegraf:
        image: telegraf:latest
        container_name: telegraf
        volumes:
          - ./data/telegraf/telegraf_config:/etc/telegraf
          - ./data/telegraf/telegraf_data:/var/lib/telegraf
        depends_on:
          - influxdb

    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        ports:
          - "3000:3000"
        volumes:
          - ./data/grafana/data:/var/lib/grafana
        environment:
          - GF_SECURITY_ADMIN_PASSWORD=adminpassword
          - GF_USERS_ALLOW_SIGN_UP=false
          - GF_AUTH_ANONYMOUS_ENABLED=true
          - GF_AUTH_ANONYMOUS_ORG_NAME=myorg
          - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
        depends_on:
          - influxdb
